// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PublishingHouse.Data.Context;

#nullable disable

namespace PublishingHouse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230528131146_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short?>("CityId")
                        .HasColumnType("smallint");

                    b.Property<short?>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date Of Birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("GenderId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("Personal ID number");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Phone number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CityEntity", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("CountryId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CityHandBooks");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CountryHandBook", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CauntryHandBooks");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.GenderHandBook", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("GenderHandBooks");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.BridgeModels.Author_Product", b =>
                {
                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthorId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("AuthorProducts");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("NumberOfPages")
                        .HasColumnType("smallint");

                    b.Property<short?>("ProductTypeId")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("PublishingHouseId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("PublishingHouseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.ProductType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypesHandBooks");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.PublishingHouseHandBook", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublishingHouseHandBooks");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.UserModel.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.Author", b =>
                {
                    b.HasOne("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CityEntity", "City")
                        .WithMany("Authors")
                        .HasForeignKey("CityId");

                    b.HasOne("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CountryHandBook", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("CountryId");

                    b.HasOne("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.GenderHandBook", "Gender")
                        .WithMany("Authors")
                        .HasForeignKey("GenderId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CityEntity", b =>
                {
                    b.HasOne("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CountryHandBook", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.BridgeModels.Author_Product", b =>
                {
                    b.HasOne("PublishingHouse.Data.Models.AuthorModel.Author", "Author")
                        .WithMany("AuthorProducts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublishingHouse.Data.Models.ProductModel.Product", "Product")
                        .WithMany("AuthorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.Product", b =>
                {
                    b.HasOne("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.ProductType", "Type")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.PublishingHouseHandBook", "PublishingHouses")
                        .WithMany("Products")
                        .HasForeignKey("PublishingHouseId");

                    b.Navigation("PublishingHouses");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.Author", b =>
                {
                    b.Navigation("AuthorProducts");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CityEntity", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.CountryHandBook", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.AuthorModel.AuthorHelperEntities.GenderHandBook", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.Product", b =>
                {
                    b.Navigation("AuthorProducts");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.ProductType", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("PublishingHouse.Data.Models.ProductModel.ProductHelperEntities.PublishingHouseHandBook", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
